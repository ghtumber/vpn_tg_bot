from datetime import date, datetime, timedelta
import re
from enum import Enum

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from outline_vpn.outline_vpn import OutlineKey

from backend.DonatPAY.donations import DonatPAYHandler
from backend.database.users import UsersDatabase
from backend.models import User, XClient
from frontend.replys import *
from globals import ADMINS, MENU_KEYBOARD_MARKUP, XSERVERS
from backend.outline.managers import SERVERS

router = Router()

CANCEL_KB = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
], resize_keyboard=True)

# ----------------CallbackData----------------
class ClientAction(str, Enum):
    disable = "üí°–í—ã–∫–ª—é—á–∏—Ç—å"
    delete = "‚õî–£–¥–∞–ª–∏—Ç—å"

class AdminClientAction(CallbackData, prefix="a"):
    action: ClientAction
    server_name: str
    inbound_id: int
    client_uuid: str

# -----------------FSM-------------------
class OutlineKeyCreation(StatesGroup):
    server = State()
    name = State()
    data_limit = State()

class OutlineKeyRemoval(StatesGroup):
    server = State()
    id = State()
    confirmation = State()

class XserverClientCreation(StatesGroup):
    server = State()
    inbound = State()
    email = State()
    expiryDate = State()
    data_limit = State()

class XserverClientListing(StatesGroup):
    server = State()
    UUID = State()

class XserverClientDisabling(StatesGroup):
    client = State()
    inbound = State()
    confirmation = State()

class XserverClientEnabling(StatesGroup):
    client = State()
    inbound = State()
    confirmation = State()

class XserverClientDeleting(StatesGroup):
    UUID = State()
    inbound = State()
    confirmation = State()

class UsersListing(StatesGroup):
    userID = State()

class UserBalanceUpdating(StatesGroup):
    user = State()
    new_value = State()
    confirmation = State()


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="menu"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_of_cancel")],
        ]
    )
    await message.answer("–û—Ç–º–µ–Ω–∞?", reply_markup=kb)


@router.callback_query((F.data == "admin_test_donatPAY") & (F.message.from_user.id in ADMINS))
async def handle_test_donatPAY(callback: CallbackQuery):
    await callback.answer("")
    await DonatPAYHandler.get_notifications(message=callback.message)


#-----------------------------------------------UserDB-------------------------------------------
@router.callback_query((F.data == "admin_get_user_info") & (F.message.from_user.id in ADMINS))
async def handle_get_user_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    page = 1
    users = await UsersDatabase.get_all_users(page=page, size=25)
    text = ""
    for user in users:
        text += f"\nüè∑UserTG: {user.userTG}  üÜî: <code>{user.userID}</code>"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="-1 —Å—Ç—Ä", callback_data=f"users_pagination_minus_{page}"), InlineKeyboardButton(text="+1 —Å—Ç—Ä", callback_data=f"users_pagination_plus_{page}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    await callback.message.answer(text=f"–õ–∏—Å—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n{text}\n‚ùî –í—ã–±–µ—Ä–∏—Ç–µ userID", reply_markup=kb, parse_mode="HTML")
    await callback.message.delete()
    await state.set_state(UsersListing.userID)

@router.callback_query(F.data.startswith("users_pagination_plus"))
async def users_paginate_plus(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[3])
    page += 1
    users = await UsersDatabase.get_all_users(page=page, size=25)
    text = ""
    for user in users:
        text += f"\nüè∑UserTG: {user.userTG}  üÜî: <code>{user.userID}</code>"
    await callback.message.edit_text(text=f"–õ–∏—Å—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n{text}\n‚ùî –í—ã–±–µ—Ä–∏—Ç–µ userID", parse_mode="HTML")

@router.callback_query(F.data.startswith("users_pagination_minus"))
async def users_paginate_minus(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[3])
    if page - 1 > 0:
        page -= 1
    users = await UsersDatabase.get_all_users(page=page, size=25)
    text = ""
    for user in users:
        text += f"\nüè∑UserTG: {user.userTG}  üÜî: <code>{user.userID}</code>"
    await callback.message.edit_text(text=f"–õ–∏—Å—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n{text}\n‚ùî –í—ã–±–µ—Ä–∏—Ç–µ userID", parse_mode="HTML")

@router.message(UsersListing.userID)
async def handle_xserver_new_client_data_listing(message: Message, state: FSMContext):
    await state.update_data(userID=message.text.strip())
    data = await state.get_data()
    await state.clear()
    user = await UsersDatabase.get_user_by(ID=data["userID"])
    answer = f"""
üîó <b>TG</b>: {user.userTG}
üí∞ <b>Balance</b>: {user.moneyBalance}—Ä—É–±.
üÜî <b>UUID</b>: {user.uuid}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {user.Protocol}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {user.serverType} -> {user.serverName}
üïì <b>–û–ø–ª–∞—Ç–∞</b>: {user.PaymentDate.strftime(r"%d.%m.%Y") if user.PaymentDate else "None"}
üïì <b>–ü–æ—Å–ª. –æ–ø–ª–∞—Ç–∞</b>: {user.lastPaymentDate.strftime(r"%d.%m.%Y") if user.lastPaymentDate else "None"}
<span class="tg-spoiler">|api|{user.userID}|api|</span>
"""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_change_user_balance"),]
        ]
    )
    await message.answer(text=answer, reply_markup=kb)


@router.callback_query((F.data == "admin_change_user_balance") & (F.message.from_user.id in ADMINS))
async def handle_admin_change_user_balance(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    prev_text = callback.message.text
    userID = prev_text.split("|api|")[1]
    user = await UsersDatabase.get_user_by(ID=userID)
    await state.update_data(user=user)
    await state.set_state(UserBalanceUpdating.new_value)
    answer = f"""
üîó <b>TG</b>: {user.userTG}
üí∞ <b>Balance</b>: {user.moneyBalance}—Ä—É–±.
‚ùî –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å? (ex. +100)
"""
    await callback.message.answer(text=answer, reply_markup=CANCEL_KB)


@router.message(UserBalanceUpdating.new_value)
async def handle_admin_change_user_balance_new_value(message: Message, state: FSMContext):
    text = message.text
    if text[0] != "+" and text[0] != "-":
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ñ–æ—Ä–º–∞—Ç</b> –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n‚Äº –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ +100 –∏–ª–∏ -100.")
        return 0
    try:
        text = int(text)
    except ValueError:
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ñ–æ—Ä–º–∞—Ç</b> –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n‚Äº –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ +100 –∏–ª–∏ -100.")
        return 0
    data = await state.get_data()
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    answer = f"""
‚úÖ –°–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
üîó <b>TG</b>: {data["user"].userTG}
üí∞ <b>Balance</b>: {data["user"].moneyBalance}—Ä—É–±. -> {data["user"].moneyBalance + text}—Ä—É–±.
‚ùî –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""
    await state.update_data(user=data["user"], new_value=text)
    await state.set_state(UserBalanceUpdating.confirmation)
    await message.answer(text=answer, reply_markup=kb)

@router.message(UserBalanceUpdating.confirmation)
async def handle_admin_change_user_balance_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    user: User = data["user"]
    user.moneyBalance += data["new_value"]
    user: User = await UsersDatabase.update_user(user=user, change={})
    answer = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!
üîó <b>TG</b>: {user.userTG}
üí∞ <b>Balance</b>: {user.moneyBalance}—Ä—É–±.
"""
    await state.clear()
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)


#-----------------------------------------------Managers-------------------------------------------
@router.callback_query((F.data == "admin_manage_xservers") & (F.message.from_user.id in ADMINS))
async def handle_create_xserver_client(callback: CallbackQuery):
    await callback.answer("")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_create_xserver_client"),
             InlineKeyboardButton(text="üöπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É", callback_data="admin_get_xserver_client_info")],
        ]
    )
    await callback.message.answer(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(XSERVERS)} XServers.", reply_markup=MENU_KEYBOARD_MARKUP)
    await callback.message.answer("‚ö° –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å.", reply_markup=keyboard)


@router.callback_query((F.data == "admin_manage_outlines") & (F.message.from_user.id in ADMINS))
async def handle_create_xserver_client(callback: CallbackQuery):
    await callback.answer("")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="admin_create_outline_key"),
             InlineKeyboardButton(text="üöπ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="admin_delete_outline_key")],
        ]
    )
    await callback.message.answer(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(SERVERS)} Outline —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=MENU_KEYBOARD_MARKUP)
    await callback.message.answer("‚ö° –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å.", reply_markup=keyboard)


# ------------------------------------------XServers-------------------------------------------------
@router.callback_query((F.data == "admin_create_xserver_client") & (F.message.from_user.id in ADMINS))
async def handle_create_xserver_client(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")

    def build_kb():
        builder = ReplyKeyboardBuilder()
        for ind in range(len(XSERVERS)):
            builder.button(text=f"{str(ind + 1)}) {XSERVERS[ind].name}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        if len(XSERVERS) % 2 == 0:
            builder.adjust(*[2 for _ in range(len(XSERVERS) // 2)], 1)
        else:
            builder.adjust(*[2 for _ in range(len(XSERVERS) // 2 + 1)], 1)
        return builder.as_markup(resize_keyboard=True)

    await callback.message.answer("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=build_kb())
    await callback.message.delete()
    await state.set_state(XserverClientCreation.server)


@router.message(XserverClientCreation.server)
async def handle_xserver_new_client_server_selection(message: Message, state: FSMContext):
    try:
        server = XSERVERS[int(message.text.split(")")[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0

    inbounds = server.inbounds
    def build_kb():
        builder = ReplyKeyboardBuilder()
        for ind in range(len(inbounds)):
            builder.button(text=f"{int(message.text.split(')')[0]) - 1}.{str(ind + 1)}) {inbounds[ind].protocol}")

        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        if len(inbounds) % 2 == 0:
            builder.adjust(*[2 for _ in range(len(inbounds) // 2)], 1)
        else:
            builder.adjust(*[2 for _ in range(len(inbounds) // 2 + 1)], 1)
        return builder.as_markup(resize_keyboard=True)

    await state.update_data(server=server)
    await state.set_state(XserverClientCreation.inbound)
    await message.answer(text="üî± –ö–∞–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª?", reply_markup=build_kb())

@router.message(XserverClientCreation.inbound)
async def handle_xserver_new_client_inbound(message: Message, state: FSMContext):
    try:
        inbound = XSERVERS[int(message.text.split(")")[0].split(".")[0])].inbounds[int(message.text.split(")")[0].split(".")[1]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0

    await state.update_data(inbound=inbound)
    await state.set_state(XserverClientCreation.email)
    await message.answer(text="üîë –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=CANCEL_KB)

@router.message(XserverClientCreation.email)
async def handle_key_naming(message: Message, state: FSMContext):
    await state.update_data(email=message.text.strip())
    await state.set_state(XserverClientCreation.expiryDate)
    await message.answer("–¢–µ–ø–µ—Ä—å <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ –¥–∞—Ç–µ</b>.\n\n‚Äº–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ <b>0</b>, –µ—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")

@router.message(XserverClientCreation.expiryDate)
async def handle_xserver_new_client_expriry_date(message: Message, state: FSMContext):
    if message.text.strip() != "0":
        if not re.fullmatch(r'[0-9][0-9].[0-9][0-9].[2-9][0-9][2-9][4-9]', r''.join(message.text.strip())):
            await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ñ–æ—Ä–º–∞—Ç</b> –¥–∞—Ç—ã.\n\n‚Äº –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.")
            return 0
        ED_mes = message.text.strip().split(".")
        expiryDate = date(int(ED_mes[2]), int(ED_mes[1]), int(ED_mes[0]))
    else:
        expiryDate = 0
    await state.update_data(expiryDate=expiryDate)
    await state.set_state(XserverClientCreation.data_limit)
    await message.answer(text="‚èπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –ì–ë(0 - –Ω–µ—Ç):")


@router.message(XserverClientCreation.data_limit)
async def handle_xserver_new_client_data_limiting(message: Message, state: FSMContext):
    try:
        limit = float(message.text.strip())
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ üòë\np.s. –∏–ª–∏ –Ω–∞–¥–æ —é–∑–∞—Ç—å —Ç–æ—á–∫—É –•–î")
        return 0
    await state.update_data(data_limit=limit)
    data = await state.get_data()
    await state.clear()
    expiryTime = 0
    if data["expiryDate"]:
        epoch = datetime.utcfromtimestamp(0)
        expiryTime = (datetime(data["expiryDate"].year, data["expiryDate"].month, data["expiryDate"].day) - epoch).total_seconds() * 1000
    xclient: XClient = await data["inbound"].add_client(email=data["email"], totalBytes=data["data_limit"]*1024**3, expiryTime=expiryTime)
    answer = f"""
‚úÖ <b>–ö–ª—é—á —Å–æ–∑–¥–∞–Ω</b>
üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {xclient.email}
üÜî <b>UUID</b>: {xclient.uuid}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {data["inbound"].protocol}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {xclient.totalGB / 1024**3}GB
üîë <b>–ö–ª—é—á</b>: <pre><code>{xclient.key}</code></pre>
"""
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)


@router.callback_query((F.data == "admin_get_xserver_client_info") & (F.message.from_user.id in ADMINS))
async def handle_get_xserver_client_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")

    def build_kb():
        builder = ReplyKeyboardBuilder()
        for ind in range(len(XSERVERS)):
            builder.button(text=f"{str(ind + 1)}) {XSERVERS[ind].name}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        if len(XSERVERS) % 2 == 0:
            builder.adjust(*[2 for _ in range(len(XSERVERS) // 2)], 1)
        else:
            builder.adjust(*[2 for _ in range(len(XSERVERS) // 2 + 1)], 1)
        return builder.as_markup(resize_keyboard=True)

    await callback.message.answer("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=build_kb())
    await callback.message.delete()
    await state.set_state(XserverClientListing.server)


@router.message(XserverClientListing.server)
async def handle_xserver_xclient_person_selection(message: Message, state: FSMContext):
    try:
        server = XSERVERS[int(message.text.split(")")[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0

    clients = await server.get_all_clients()
    text = ""
    for client in clients:
        text += f"\nüè∑Email: {client.email}\nüÜîUUID: <code>{client.uuid}</code>"

    await state.update_data(server=server)
    await state.set_state(XserverClientListing.UUID)
    await message.answer(text=f"–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: {text}\n‚ñ∂–í—ã–±–µ—Ä–∏ UUID", reply_markup=CANCEL_KB, parse_mode="HTML")


@router.message(XserverClientListing.UUID)
async def handle_xserver_new_client_data_listing(message: Message, state: FSMContext):
    await state.update_data(UUID=message.text.strip())
    data = await state.get_data()
    await state.clear()
    xclient: XClient= await data["server"].get_client_info(identifier=data["UUID"])
    client_traffics = await data["server"].get_client_traffics(uuid=data["UUID"])
    inbound = None
    for inb in data["server"].inbounds:
        if xclient.flow:
            if inb.protocol == "vless":
                inbound = inb
                break
        else:
            if inb.protocol == "shadowsocks":
                inbound = inb
                break
    epoch = datetime.utcfromtimestamp(0)
    expriryDate = epoch + timedelta(milliseconds=xclient.expiryTime)
    exprDate = f"{expriryDate.strftime('%A %d.%m.%Y')}"
    print(f"{client_traffics=}\n{xclient=}")
    answer = f"""
‚úÖ <b>–ö–ª—é—á</b>
{'üåö <b>–û—Ç–∫–ª—é—á–µ–Ω</b>' if not xclient.enable else 'üåù <b>–ê–∫—Ç–∏–≤–µ–Ω</b>'}
üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {xclient.email}
üÜî <b>UUID</b>: {xclient.uuid}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {"ShadowSocks" if not xclient.flow else "VLESS"}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
‚èπ <b>–¢—Ä–∞—Ñ–∏–∫</b>: {round((client_traffics["up"] + client_traffics["down"]) / 1024**3, 2)}/{xclient.totalGB / 1024**3}GB
üïì <b>–ò—Å—Ç–µ–∫–∞–µ—Ç</b>: {exprDate}
üîë <b>–ö–ª—é—á</b>: <pre><code>{await xclient.get_key(XSERVERS)}</code></pre>
<span class="tg-spoiler">|api|{data["server"].name}:{inbound.id}:{xclient.uuid}|api|</span>
"""
    if xclient.enable:
        turn_text = "üì¥ –í—ã–∫–ª—é—á–∏—Ç—å"
        turn_call = "admin_offClient"
    else:
        turn_text = "üí° –í–∫–ª—é—á–∏—Ç—å"
        turn_call = "admin_onClient"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=turn_text, callback_data=turn_call),
             InlineKeyboardButton(text="‚õî –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delClient")],
        ]
    )
    await message.answer(text=answer, reply_markup=kb)

@router.callback_query(F.data == "admin_offClient")
async def handle_admin_disable_xclient(callback: CallbackQuery, state: FSMContext):
    prev_text = callback.message.text
    packed = prev_text.split("|api|")[1].split(":")
    inbound = None
    client = None
    for srv in XSERVERS:
        if srv.name == packed[0]:
            for inb in srv.inbounds:
                if inb.id == int(packed[1]):
                    inbound = inb
    for cl in inbound.settings["clients"]:
        if cl["id"] == packed[2]:
            client = XClient.create_from_dict(cl)
    await state.update_data(inbound=inbound, client=client)
    await state.set_state(XserverClientDisabling.confirmation)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    await callback.message.answer(text="‚ùì –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞?", reply_markup=kb)

@router.message(XserverClientDisabling.confirmation)
async def handle_xserver_client_disabling(message: Message, state: FSMContext):
    data = await state.get_data()
    inbound = data["inbound"]
    success = await inbound.update_client(client=data["client"], changes={'enable': False})
    await state.clear()
    await message.delete()
    if success:
        answer = f"""
    ‚Äº <b>–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω</b>
    üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data["client"].email}
    üÜî <b>ID</b>: {data["client"].uuid}
    üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {inbound.server.name}
    üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {"ShadowSocks" if inbound.protocol == "shadowsocks" else "VLESS"}
    """
        await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)
        return
    await message.answer(text="‚Äº –û—à–∏–±–∫–∞!\nState –æ—á–∏—â–µ–Ω.", reply_markup=MENU_KEYBOARD_MARKUP)

@router.callback_query(F.data == "admin_onClient")
async def handle_admin_enable_xclient(callback: CallbackQuery, state: FSMContext):
    prev_text = callback.message.text
    packed = prev_text.split("|api|")[1].split(":")
    inbound = None
    client = None
    for srv in XSERVERS:
        if srv.name == packed[0]:
            for inb in srv.inbounds:
                if inb.id == int(packed[1]):
                    inbound = inb
    for cl in inbound.settings["clients"]:
        if cl["id"] == packed[2]:
            client = XClient.create_from_dict(cl)
    await state.update_data(inbound=inbound, client=client)
    await state.set_state(XserverClientEnabling.confirmation)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –í–∫–ª—é—á–∞–µ–º"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    await callback.message.answer(text="‚ùì –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞?", reply_markup=kb)

@router.message(XserverClientEnabling.confirmation)
async def handle_xserver_client_enabling(message: Message, state: FSMContext):
    data = await state.get_data()
    inbound = data["inbound"]
    success = await inbound.update_client(client=data["client"], changes={'enable': True})
    await state.clear()
    await message.delete()
    if success:
        answer = f"""
    ‚Äº <b>–ö–ª–∏–µ–Ω—Ç –≤–∫–ª—é—á—ë–Ω</b>
    üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data["client"].email}
    üÜî <b>ID</b>: {data["client"].uuid}
    üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {inbound.server.name}
    üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {"ShadowSocks" if inbound.protocol == "shadowsocks" else "VLESS"}
    """
        await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)
        return
    await message.answer(text="‚Äº –û—à–∏–±–∫–∞!\nState –æ—á–∏—â–µ–Ω.", reply_markup=MENU_KEYBOARD_MARKUP)

@router.callback_query(F.data == "admin_delClient")
async def handle_admin_delete_xclient(callback: CallbackQuery, state: FSMContext):
    await state.set_state(XserverClientDeleting.inbound)
    prev_text = callback.message.text
    packed = prev_text.split("|api|")[1].split(":")
    inbound = None
    for srv in XSERVERS:
        if srv.name == packed[0]:
            for inb in srv.inbounds:
                if inb.id == int(packed[1]):
                    inbound = inb
    await state.update_data(inbound=inbound, UUID=packed[2])
    await state.set_state(XserverClientDeleting.confirmation)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –£–¥–∞–ª—è–µ–º"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    await callback.message.answer(text=f"‚ùì –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞?", reply_markup=kb)

@router.message(XserverClientDeleting.confirmation)
async def handle_xserver_client_deletion(message: Message, state: FSMContext):
    data = await state.get_data()
    client = None
    inbound = data["inbound"]
    for cl in inbound.settings["clients"]:
        if cl["id"] == data["UUID"]:
            client = cl
    success = await inbound.delete_client(client_id=data["UUID"])
    await state.clear()
    await message.delete()
    if success:
        answer = f"""
    ‚Äº <b>–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω</b>
    üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {client["email"]}
    üÜî <b>ID</b>: {data["UUID"]}
    üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {inbound.server.name}
    üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>: {"ShadowSocks" if inbound.protocol == "shadowsocks" else "VLESS"}
    """
        await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)
        return
    await message.answer(text="‚Äº –û—à–∏–±–∫–∞!\nState –æ—á–∏—â–µ–Ω.", reply_markup=MENU_KEYBOARD_MARKUP)



# -------------------------------------------Outline-------------------------------------------------
@router.callback_query((F.data == "admin_create_outline_key") & (F.message.from_user.id in ADMINS))
async def handle_create_key(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")

    def build_kb():
        builder = ReplyKeyboardBuilder()
        for ind in range(len(SERVERS)):
            builder.button(text=f"{str(ind + 1)}) {SERVERS[ind].name}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        if len(SERVERS) % 2 == 0:
            builder.adjust(*[2 for _ in range(len(SERVERS) // 2)], 1)
        else:
            builder.adjust(*[2 for _ in range(len(SERVERS) // 2 + 1)], 1)
        return builder.as_markup(resize_keyboard=True)

    await callback.message.answer("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=build_kb())
    await callback.message.delete()
    await state.set_state(OutlineKeyCreation.server)


@router.message(OutlineKeyCreation.server)
async def handle_server_selection(message: Message, state: FSMContext):
    try:
        server = SERVERS[int(message.text.split(")")[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0
    await state.update_data(server=server)
    await state.set_state(OutlineKeyCreation.name)
    await message.answer(text="üîë –î–∞–π—Ç–µ –∏–º—è –∫–ª—é—á—É:", reply_markup=CANCEL_KB)


@router.message(OutlineKeyCreation.name)
async def handle_key_naming(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(OutlineKeyCreation.data_limit)
    await message.answer(text="‚èπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –ì–ë(0 - –Ω–µ—Ç):")


@router.message(OutlineKeyCreation.data_limit)
async def handle_key_data_limiting(message: Message, state: FSMContext):
    try:
        limit = float(message.text.strip())
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ üòë\np.s. –∏–ª–∏ –Ω–∞–¥–æ —é–∑–∞—Ç—å —Ç–æ—á–∫—É –•–î")
        return 0
    await state.update_data(data_limit=limit)
    data = await state.get_data()
    await state.clear()
    key: OutlineKey = data["server"].create_new_key(name=data["name"], data_limit_gb=data["data_limit"])
    link = str(key.access_url).split("?")[0] + "#Proxym1ty-VPN"
    #raise Exception(f"{key=}")
    print(f"{key=}")
    answer = f"""
‚úÖ <b>–ö–ª—é—á —Å–æ–∑–¥–∞–Ω</b>
üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {key.name}
üÜî <b>ID</b>: {key.key_id}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {key.data_limit / 1024**3 if key.data_limit else "~INF~"}GB
üîë <b>–ö–ª—é—á</b>: <pre><code>{link}</code></pre>
"""
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)


@router.callback_query((F.data == "admin_delete_outline_key") & (F.message.from_user.id in ADMINS))
async def handle_create_key(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")

    def build_kb():
        builder = ReplyKeyboardBuilder()
        for ind in range(len(SERVERS)):
            builder.button(text=f"{str(ind + 1)}) {SERVERS[ind].name}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        if len(SERVERS) % 2 == 0:
            builder.adjust(*[2 for _ in range(len(SERVERS) // 2)], 1)
        else:
            builder.adjust(*[2 for _ in range(len(SERVERS) // 2 + 1)], 1)
        return builder.as_markup(resize_keyboard=True)

    await callback.message.answer("‚ùî –ù–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∫–ª—é—á?\n\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=build_kb())
    await callback.message.delete()
    await state.set_state(OutlineKeyRemoval.server)


@router.message(OutlineKeyRemoval.server)
async def handle_key_removal_server_selection(message: Message, state: FSMContext):
    try:
        m = message.text.split(")")
        server = SERVERS[int(m[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0
    await state.update_data(server=server)
    await state.set_state(OutlineKeyRemoval.id)
    await message.answer(text="üÜî –ö–∞–∫–æ–π ID –∫–ª—é—á–∞?", reply_markup=CANCEL_KB)


@router.message(OutlineKeyRemoval.id)
async def handle_key_removal_identification(message: Message, state: FSMContext):
    try:
        id = int(message.text.strip())
        await state.update_data(id=id)
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ üòë")
        return 0
    await state.set_state(OutlineKeyRemoval.confirmation)
    data = await state.get_data()
    info = data["server"].get_key_info(str(id))
    if info is None:
        await message.answer(text="–û—à–∏–±–∫–∞ ‚ùó\n–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üòë")
        return 0
    answer = f"""
‚ùì <b>–£–¥–∞–ª—è–µ–º –∫–ª—é—á?</b>
üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {info.name}
üÜî <b>ID</b>: {info.key_id}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {info.data_limit / 1024**3}GB
üîë <b>–ö–ª—é—á</b>: <code>{info.access_url}</code>
"""
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –£–¥–∞–ª—è–µ–º"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    await message.answer(text=answer, reply_markup=kb, parse_mode="HTML")


@router.message(OutlineKeyRemoval.confirmation)
async def handle_key_naming(message: Message, state: FSMContext):
    data = await state.get_data()
    info = data["server"].get_key_info(str(data["id"]))
    if info is None:
        await message.answer(text="–û—à–∏–±–∫–∞ ‚ùó\n–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üòë")
        return 0
    data["server"].delete_key(str(data["id"]))
    answer = f"""
‚Äº <b>–ö–ª—é—á —É–¥–∞–ª—ë–Ω</b>
üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {info.name}
üÜî <b>ID</b>: {info.key_id}
üõ∞ <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {info.data_limit / 1024**3}GB
üîë <b>–ö–ª—é—á</b>: <pre><code>{info.access_url}</code></pre>
"""
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)



