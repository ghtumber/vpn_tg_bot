import asyncio
import re
import time
from datetime import date, datetime, timedelta
from typing import Protocol

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from backend.DonatPAY.donations import DonatPAYHandler
from backend.models import User, OutlineClient, XClient
from backend.xapi.servers import XServer
from frontend.replys import *
from backend.outline.managers import SERVERS, OutlineManager
from backend.database.users import UsersDatabase
from globals import add_months, MENU_KEYBOARD_MARKUP, use_BASIC_VPN_COST, DEBUG, use_PREFERRED_PAYMENT_SETTINGS, bot, use_XSERVERS, \
    Available_Tariffs, use_Available_Tariffs, REFERRAL_PERCENTAGE_QUEUE

router = Router()

#@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_user_cancel(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="menu"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_of_cancel")],
        ]
    )
    print("Nihuya HERE")
    await message.answer("–û—Ç–º–µ–Ω–∞?", reply_markup=kb)


class OldRegistration(StatesGroup):
    key = State()
    payment_date = State()
    payment_sum = State()

class KeyPayment(StatesGroup):
    tariff = State()
    configuration_type = State()
    server = State()
    outline_server = State()
    keyType = State()
    confirmation = State()

#----------------------------------------Balance top-up----------------------------------------------
@router.callback_query(F.data == "topup_user_balance")
async def handle_topup_user_balance(callback: CallbackQuery):
    await callback.answer("")
    user = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", url=DonatPAYHandler.form_link(user=user))]
        ]
    )
    await callback.message.answer(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ùì –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∏–∑–º–µ–Ω–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è\n‚ùó –ù–µ –º–µ–Ω—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∏–º—è\n‚ú® –ë–æ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–∏ 5-10 –º–∏–Ω—É—Ç", reply_markup=keyboard)


#----------------------------------------Key Payment----------------------------------------------
@router.callback_query(F.data == "buy_key")
async def handle_buy_key(callback: CallbackQuery, state: FSMContext):
    if not Available_Tariffs:
        await callback.answer(text="üòï –°–µ–π—á–∞—Å –ø–æ–∫—É–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    await callback.answer(text='')
    kb_l = []
    for e in use_Available_Tariffs():
        kb_l.append([InlineKeyboardButton(text=f"‚ô¶ {e}", callback_data=f"buy_key_tariff_{e}")])
    kb_l.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_l)
    answer = f"""
üåü –í—ã–±–æ—Ä <b>—Ç–∞—Ä–∏—Ñ–∞</b>.
–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ:
üëâ <b>PROMO</b> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç VPN (–∫ –ø—Ä–∏–º–µ—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Youtube)
- 100 –ú–ë/—Å –∫–∞–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤–∞—à–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º)
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –æ–±—ã—á–Ω–∞—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –≤–æ–∑–º–æ–∂–Ω—ã –ø–æ–¥–≤–∏—Å–∞–Ω–∏—è
üëâ <b>MAX</b> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- 10 Gbit/s –∫–∞–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤–∞—à–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º)
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- —Å—Ç–∞–±–∏–ª—å–Ω—ã–π uptime 99%
"""
    await callback.message.answer(answer, reply_markup=keyboard)
    await state.set_state(KeyPayment.tariff)

@router.callback_query(F.data.startswith("buy_key_tariff_"))
async def handle_buy_key(callback: CallbackQuery, state: FSMContext):
    tariff = callback.data.split("_")[3]
    await callback.answer("")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –ê–≤—Ç–æ –ø–æ–¥–±–æ—Ä"), KeyboardButton(text="‚öô –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await state.update_data(tariff=tariff)
    await callback.message.answer(f"üîë –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN-–∫–ª—é—á–∞\n–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    await callback.message.delete()
    await state.set_state(KeyPayment.configuration_type)

@router.message(KeyPayment.configuration_type)
async def handle_key_payment_server_type(message: Message, state: FSMContext):
    if not ("–ê–≤—Ç–æ –ø–æ–¥–±–æ—Ä" in message.text.strip() or "–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞" in message.text.strip()):
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ç–∏–ø</b> —Å–µ—Ä–≤–µ—Ä–∞.\n\n‚Äº –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ</b>.")
        return 0
    configuration_type = "Auto" if "–ê–≤—Ç–æ –ø–æ–¥–±–æ—Ä" in message.text.strip() else "Manual"
    data = await state.get_data()
    tariff = data["tariff"]
    if configuration_type == "Auto":
        svr = None
        for server in use_XSERVERS():
            if server.name == use_PREFERRED_PAYMENT_SETTINGS()["Tariffs"][tariff]["server_name"]:
                svr = server
                break
        if not svr:
            await message.answer(text="üòì –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä.\nüôè –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return 0
        await state.update_data(server=svr, keyType=use_PREFERRED_PAYMENT_SETTINGS()["Tariffs"][tariff]["keyType"], auto=True, tariff=tariff, configuration_type=configuration_type)
        await state.set_state(KeyPayment.keyType)
        await handle_key_payment_key_type(message=message, state=state)
    elif configuration_type == "Manual":
        svr = None
        for server in use_XSERVERS():
            if server.name == use_PREFERRED_PAYMENT_SETTINGS()["Tariffs"][tariff]["server_name"]:
                svr = server
                break
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ö´ ShadowSocks"), KeyboardButton(text="üîµ VLESS")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True
        )
        await state.set_state(KeyPayment.keyType)
        await state.update_data(tariff=tariff, server=svr, configuration_type=configuration_type)
        await message.answer(text=f"üì° –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n‚Äº –í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—Ç–µ ShadowSocks –∑–∞–º–µ—á–µ–Ω—ã –ø–µ—Ä–µ–±–æ–∏!!!", reply_markup=keyboard)

@router.message(KeyPayment.server)
async def handle_key_payment_server(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        servers = data["server_variants"]
        server = servers[int(message.text.split(")")[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0
    await state.update_data(server=server, tariff=data["tariff"])
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö´ ShadowSocks"), KeyboardButton(text="üîµ VLESS")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await message.answer(text=f"üì° –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n‚Äº –í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—Ç–µ ShadowSocks –∑–∞–º–µ—á–µ–Ω—ã –ø–µ—Ä–µ–±–æ–∏!!!", reply_markup=keyboard)
    await state.set_state(KeyPayment.keyType)

@router.message(KeyPayment.keyType)
async def handle_key_payment_key_type(message: Message, state: FSMContext):
    data = await state.get_data()
    protocol = ""
    if data["configuration_type"] == "Manual":
        if not ("ShadowSocks" in message.text.strip() or "VLESS" in message.text.strip()):
            await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>–ø—Ä–æ—Ç–æ–∫–æ–ª</b> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n‚Äº –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ</b>.")
            return 0
        protocol = message.text.strip().split(" ")[1]
    else:
        protocol = data["keyType"]

    answer = f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ. –í—ã–±—Ä–∞–Ω–æ:
‚ö° <b>–¢–∞—Ä–∏—Ñ</b>: {data["tariff"]}
üåê <b>–°–µ—Ä–≤–µ—Ä</b> {data['server'].name}
üè≥ <b>–õ–æ–∫–∞—Ü–∏—è</b>: {data['server'].location}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>: {protocol} 
‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</b>: {'10 Gbit/s' if data["tariff"] == "MAX" else '100 –ú–ë/c'}
üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {use_PREFERRED_PAYMENT_SETTINGS()['Tariffs'][data['tariff']]['coast']}—Ä/–º–µ—Å
üßæ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è <b>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ</b> –æ–ø–ª–∞—Ç—É
"""
    await state.set_state(KeyPayment.confirmation)
    await state.update_data(configuration_type=data["configuration_type"], server=data["server"], keyType=protocol, tariff=data["tariff"])
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await message.answer(text=answer, reply_markup=keyboard)

@router.message(KeyPayment.confirmation)
async def handle_key_payment_confirmation(message: Message, state: FSMContext):
    user: User = await UsersDatabase.get_user_by(ID=str(message.from_user.id))
    data = await state.get_data()
    coast = use_PREFERRED_PAYMENT_SETTINGS()["Tariffs"][data["tariff"]]["coast"]
    if user.moneyBalance < coast:
        await message.answer(text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <b>—Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=MENU_KEYBOARD_MARKUP)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=DonatPAYHandler.form_link(user=user))]
        ])
        await message.answer(text="üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ</b> –±–∞–ª–∞–Ω—Å.", reply_markup=kb)
        await state.clear()
        await message.delete()
        return 0
    epoch = datetime(year=1970, month=1, day=1, hour=0, minute=0, second=0) - timedelta(seconds=time.timezone)

    # Referral system
    # if user.who_invited:
    #     inviter = await UsersDatabase.get_user_by(ID=user.who_invited)
    #     all_refs = await UsersDatabase.get_all_referrals(ID=inviter.userID)
    #     if REFERRAL_PERCENTAGE_QUEUE[len(all_refs)] > int(inviter.referBonus):
    #         i = REFERRAL_PERCENTAGE_QUEUE.index(int(inviter.referBonus))
    #         print(f"{inviter.userTG} has {inviter.who_invited} now. and position is {i}")
    #         inviter.referBonus = REFERRAL_PERCENTAGE_QUEUE[i + 1]
    #         await UsersDatabase.update_user(inviter, {})
    #         await bot.send_message(chat_id=inviter.userID, text=f"ü§ù –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {user.userTG}." + "\n" + f"üìà –ù–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {inviter.referBonus}%!", reply_markup=MENU_KEYBOARD_MARKUP)

    user.change("moneyBalance", user.moneyBalance - coast)
    dat = add_months(date.today(), 1)
    user.PaymentDate = dat
    user.tariff = data["tariff"]
    user.PaymentSum = coast
    user.serverName = data["server"].name
    for inb in data["server"].inbounds:
        if inb.protocol == data["keyType"].lower():
            limitIp = 2 if data["tariff"] == "PROMO" else 5
            delta = timedelta(hours=15) if time.timezone == 0 else timedelta(hours=20)
            expiryTime = (datetime(dat.year, dat.month, dat.day) - epoch + delta).total_seconds() * 1000
            client: XClient = await inb.add_client(email=message.from_user.username, tgId=message.from_user.id, totalBytes=500*1024**3, expiryTime=expiryTime, limitIp=limitIp)
            user.xclient = client
            user.Protocol = data["keyType"]
            user.serverType = "XSERVER"
            user.uuid = client.uuid
            key = client.key
    # elif data["configuration_type"] == "Outline":
    #     server: OutlineManager = data["server"]
    #     key = server.create_new_key(name=f"@{message.from_user.username}", data_limit_gb=500)
    #     if not key.key_id:
    #         key.key_id = "9999"
    #     user.outline_client = OutlineClient(key=key.access_url, keyID=int(key.key_id), keyLimit=key.data_limit)
    #     user.Protocol = "ShadowSocks"
    #     user.serverType = "Outline"
    #     key = key.access_url.split("#")[0] + "#PROXYM1TY"
    user: User = await UsersDatabase.update_user(user=user, change={})
    totalGB = user.xclient.totalGB / 1024**3 if user.xclient else user.outline_client.keyLimit / 1000**3
    answer = f"""‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
‚ö° <b>–¢–∞—Ä–∏—Ñ</b>: {data["tariff"]}
üåê <b>–°–µ—Ä–≤–µ—Ä</b>: {data["server"].name}
üè≥ <b>–õ–æ–∫–∞—Ü–∏—è</b>: {data["server"].location}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>: {data["keyType"]}
‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</b>: {'10 Gbit/s' if data["tariff"] == "MAX" else '100 –ú–ë/c'}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {totalGB}GB
üîë <b>–ö–ª—é—á</b>: <pre><code>{user.xclient.key}</code></pre>
    """
    await state.clear()
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)


@router.callback_query(F.data == "regain_user_access")
async def handle_regain_user_access(callback: CallbackQuery):
    await asyncio.sleep(0.5)
    user: User = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    if (datetime.fromtimestamp(user.xclient.expiryTime // 1000).date() - date.today()) <= timedelta(days=0):
        if user.moneyBalance < use_BASIC_VPN_COST():
            await callback.message.answer(text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <b>—Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=MENU_KEYBOARD_MARKUP)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=DonatPAYHandler.form_link(user=user))]
            ])
            await callback.message.answer(text="üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ</b> –±–∞–ª–∞–Ω—Å.", reply_markup=kb)
            return 0
        data = await user.xclient.get_server_and_inbound(use_XSERVERS())
        user.change("moneyBalance", user.moneyBalance - user.PaymentSum)
        new_date = add_months(user.PaymentDate, 1)
        epoch = datetime(year=1970, month=1, day=1, hour=0, minute=0, second=0) - timedelta(seconds=time.timezone)
        user.xclient.enable = True
        await data["inbound"].update_client(user.xclient, {"expiryTime": (datetime(new_date.year, new_date.month, new_date.day) - epoch + timedelta(hours=19)).total_seconds() * 1000, "enable": True})
        await data["inbound"].reset_client_traffic(user.xclient.for_api())
        user.change("PaymentDate", new_date)
        await user.xclient.get_key(use_XSERVERS())
        await UsersDatabase.update_user(user)
        await callback.message.answer(text=PAYMENT_SUCCESS(user), reply_markup=MENU_KEYBOARD_MARKUP)
    await callback.answer("")

@router.callback_query(F.data == "get_instructions")
async def handle_get_instructions(callback: CallbackQuery):
    await callback.answer("")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì±Android", url="https://telegra.ph/Nastrojka-Proxym1ty-na-android-03-16"), InlineKeyboardButton(text="üçèIOS", url="https://telegra.ph/Nastrojka-Proxym1ty-na-iPhone-03-16")],
            [InlineKeyboardButton(text="üíªWin(easy)", url="https://telegra.ph/Nastrojka-Proxym1ty-na-pk-dlya-debilov-ne-gejmerov-03-16"), InlineKeyboardButton(text="üñ•Ô∏èWin(pro)", url="https://telegra.ph/Nastrojka-Proxym1ty-VPN-na-pk-i-noutbuki-01-29")],
            [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    await callback.message.edit_text(text=INSTRUCTIONS_TEXT, reply_markup=kb)

@router.callback_query(F.data.startswith("user_registration_"))
async def handle_registration(callback: CallbackQuery):
    await asyncio.sleep(2)
    who_invited = callback.data.split("_")[2]
    if who_invited != "None":
        who_invited = int(who_invited)
    else:
        who_invited = None
    u = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    await callback.answer(text='')
    if not u:
        if callback.from_user.username:
            user = User(userID=callback.from_user.id, userTG=f"@{callback.from_user.username}", PaymentSum=0, PaymentDate=None,
                        serverName="", serverType="None", moneyBalance=0, Protocol="None", tariff="None", who_invited=who_invited, referBonus=0)
            u = await UsersDatabase.create_user(user)
            await callback.message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n\nüîì –î–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç!", reply_markup=MENU_KEYBOARD_MARKUP)
        else:
            await callback.message.answer(f"‚úè –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–µ–Ω <b>username</b> –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º!")


@router.callback_query(F.data == "xclient_vpn_usage")
async def handle_xclient_vpn_usage(callback: CallbackQuery):
    await callback.answer(text='')
    user = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    d = await user.xclient.get_server_and_inbound(servers=use_XSERVERS())
    server: XServer = d["server"]
    if user.Protocol == "VLESS":
        keyInfo = await server.get_client_traffics(uuid=user.uuid)
    else:
        keyInfo = await server.get_client_traffics(email=user.xclient.email)
    traffic = keyInfo["up"] + keyInfo["down"]
    progress = round(traffic / keyInfo["total"], 2)
    answer = f"""
üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN</b> –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:
<b>{round(traffic / 1024**3, 2)}GB</b>/<b>{keyInfo["total"] // 1024**3}GB</b>
[{"".join("‚òÅ" for i in range(int(progress * 10)))}{"".join("‚ú¶" for i in range(10 - int(progress * 10)))}]
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(text=answer, reply_markup=keyboard)

@router.callback_query(F.data == "view_user_key")
async def handle_vpn_key(callback: CallbackQuery):
    await callback.answer(text='')
    user = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    if user.xclient:
        key = await user.xclient.get_key(servers=use_XSERVERS())
    else:
        key = user.outline_client.key
    answer = f"""
üîë <b>–¢–≤–æ–π –∫–ª—é—á</b>:
<pre><code>{key}</code></pre>
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(text=answer, reply_markup=keyboard)



