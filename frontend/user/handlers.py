import re
from datetime import date, datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from backend.models import User, OutlineClient
from backend.xapi.servers import Inbound, XServer
from frontend.replys import *
from backend.outline.managers import SERVERS, OutlineManager
from backend.database.users import UsersDatabase
from globals import add_months, XSERVERS, MENU_KEYBOARD_MARKUP, BASIC_VPN_COST

router = Router()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_user_cancel(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="menu"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_of_cancel")],
        ]
    )
    await message.answer("–û—Ç–º–µ–Ω–∞?", reply_markup=kb)


class OldRegistration(StatesGroup):
    key = State()
    payment_date = State()
    payment_sum = State()

class KeyPayment(StatesGroup):
    serverType = State()
    server = State()
    outline_server = State()
    keyType = State()
    confirmation = State()

#----------------------------------------Key Payment----------------------------------------------
@router.callback_query(F.data == "buy_key")
async def handle_registration(callback: CallbackQuery, state: FSMContext):
    await callback.answer(text='')
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üü¢ Outline"), KeyboardButton(text="üü£ Proxym1ty")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await callback.message.answer(f"üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞", reply_markup=keyboard)
    await state.set_state(KeyPayment.serverType)

@router.message(KeyPayment.serverType)
async def handle_key_payment_server_type(message: Message, state: FSMContext):
    if not ("Outline" in message.text.strip() or "Proxym1ty" in message.text.strip()):
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ç–∏–ø</b> —Å–µ—Ä–≤–µ—Ä–∞.\n\n‚Äº –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ</b>.")
        return 0
    server_type = message.text.strip().split(" ")[1]
    await state.update_data(serverType=server_type)
    if server_type == "Outline":
        def build_kb():
            builder = ReplyKeyboardBuilder()
            for ind in range(len(SERVERS)):
                location_imoji = ''
                if 'Germany' in SERVERS[ind].location:
                    location_imoji = 'üá©üá™'
                elif 'Finland' in SERVERS[ind].location:
                    location_imoji = 'üá´üáÆ'
                builder.button(text=f"{str(ind + 1)}) {SERVERS[ind].name}{location_imoji}")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
            if len(SERVERS) % 2 == 0:
                builder.adjust(*[2 for _ in range(len(SERVERS) // 2)], 1)
            else:
                builder.adjust(*[2 for _ in range(len(SERVERS) // 2 + 1)], 1)
            return builder.as_markup(resize_keyboard=True)
        await state.set_state(KeyPayment.keyType)
    elif server_type == "Proxym1ty":
        def build_kb():
            builder = ReplyKeyboardBuilder()
            for ind in range(len(XSERVERS)):
                location_imoji = ''
                if 'Germany' in XSERVERS[ind].location:
                    location_imoji = 'üá©üá™'
                elif 'Finland' in XSERVERS[ind].location:
                    location_imoji = 'üá´üáÆ'
                builder.button(text=f"{str(ind + 1)}) {location_imoji}{XSERVERS[ind].name}")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
            if len(XSERVERS) % 2 == 0:
                builder.adjust(*[2 for _ in range(len(XSERVERS) // 2)], 1)
            else:
                builder.adjust(*[2 for _ in range(len(XSERVERS) // 2 + 1)], 1)
            return builder.as_markup(resize_keyboard=True)
        await state.set_state(KeyPayment.server)
    await message.answer(text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! üè≥ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä", reply_markup=build_kb())

@router.message(KeyPayment.server)
async def handle_key_payment_server(message: Message, state: FSMContext):
    try:
        server = XSERVERS[int(message.text.split(")")[0]) - 1]
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
        return 0
    await state.update_data(server=server)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö´ ShadowSocks"), KeyboardButton(text="üîµ VLESS")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await message.answer(text=f"üì° –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", reply_markup=keyboard)
    await state.set_state(KeyPayment.keyType)

@router.message(KeyPayment.keyType)
async def handle_key_payment_protocol(message: Message, state: FSMContext):
    data = await state.get_data()
    if data["serverType"] == "VLESS":
        if not ("ShadowSocks" in message.text.strip() or "VLESS" in message.text.strip()):
            await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>–ø—Ä–æ—Ç–æ–∫–æ–ª</b> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n‚Äº –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ <b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ</b>.")
            return 0
        protocol = message.text.strip().split(" ")[1]
    elif data["serverType"] == "Outline":
        try:
            server = SERVERS[int(message.text.split(")")[0]) - 1]
            data["server"] = server
        except IndexError:
            await message.answer("–û—à–∏–±–∫–∞ ‚ùó\n–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç üòë")
            return 0
        await state.update_data(server=server)
        protocol = "ShadowSocks"

    answer = f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ. –¢–≤–æ–π –∑–∞–∫–∞–∑:
üåê <b>–°–µ—Ä–≤–µ—Ä</b> {data["serverType"]}: {data["server"].name}
üè≥ <b>–õ–æ–∫–∞—Ü–∏—è</b>: {data["server"].location}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>: {protocol} 
üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {BASIC_VPN_COST}—Ä
üßæ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è <b>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ</b> –æ–ø–ª–∞—Ç—É
"""
    await state.set_state(KeyPayment.confirmation)
    await state.update_data(serverType=data["serverType"], server=data["server"], keyType=protocol)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await message.answer(text=answer, reply_markup=keyboard)

@router.message(KeyPayment.confirmation)
async def handle_key_payment_confirmation(message: Message, state: FSMContext):
    user: User = await UsersDatabase.get_user_by(ID=str(message.from_user.id))
    if user.moneyBalance < BASIC_VPN_COST:
        await message.answer(text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <b>—Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n‚Äº <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ</b> –±–∞–ª–∞–Ω—Å.", reply_markup=MENU_KEYBOARD_MARKUP)
        await state.clear()
        await message.delete()
        return 0
    data = await state.get_data()
    epoch = datetime.utcfromtimestamp(0)
    user.moneyBalance -= BASIC_VPN_COST
    dat = add_months(date.today(), 1)
    user.PaymentDate = dat
    user.lastPaymentDate = date.today()
    user.PaymentSum = BASIC_VPN_COST
    user.serverName = data["server"].name
    if data["serverType"] == "Proxym1ty":
        for inb in data["server"].inbounds:
            if inb.protocol == data["keyType"].lower():
                expiryTime = (datetime(dat.year, dat.month, dat.day) - epoch).total_seconds() * 1000
                client = await inb.add_client(email=message.from_user.username, tgId=message.from_user.id, totalBytes=500*1024**3, expiryTime=expiryTime)
                user.xclient = client
                user.Protocol = data["keyType"]
                user.serverType = "XSERVER"
                user.uuid = client.uuid
                key = client.key
    elif data["serverType"] == "Outline":
        server: OutlineManager = data["server"]
        key = server.create_new_key(name=f"@{message.from_user.username}", data_limit_gb=500)
        if not key.key_id:
            key.key_id = "9999"
        user.outline_client = OutlineClient(key=key.access_url, keyID=int(key.key_id), keyLimit=key.data_limit)
        user.Protocol = "ShadowSocks"
        user.serverType = "Outline"
        key = key.access_url.split("#")[0] + "#PROXYM1TY"
    user: User = await UsersDatabase.update_user(user=user, change={})
    totalGB = user.xclient.totalGB / 1024**3 if user.xclient else user.outline_client.keyLimit / 1000**3
    answer = f"""‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
üåê <b>–°–µ—Ä–≤–µ—Ä</b> {data["serverType"]}: {data["server"].name}
üè≥ <b>–õ–æ–∫–∞—Ü–∏—è</b>: {data["server"].location}
üì° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>: {data["keyType"]}
‚èπ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ</b>: {totalGB}GB
üîë <b>–ö–ª—é—á</b>: <pre><code>{user.xclient.key if data["serverType"] == "Proxym1ty" else user.outline_client.key}</code></pre>
    """
    await state.clear()
    await message.answer(text=answer, reply_markup=MENU_KEYBOARD_MARKUP)


@router.callback_query(F.data == "user_registration")
async def handle_registration(callback: CallbackQuery):
    await callback.answer(text='')
    user = User(userID=callback.from_user.id, userTG=f"@{callback.from_user.username}", PaymentSum=0, PaymentDate=None,
                serverName="", serverType="", moneyBalance=0, Protocol="", lastPaymentDate=None)
    u = await UsersDatabase.create_user(user)
    await callback.message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n\nüîì –î–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç!", reply_markup=MENU_KEYBOARD_MARKUP)



@router.callback_query(F.data == "user_registration")
async def handle_reg(callback: CallbackQuery, state: FSMContext):
    await callback.answer(text='')
    user_resp = await UsersDatabase.get_user_by(TG="@"+callback.from_user.username)
    if user_resp:
        await callback.message.answer(text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòé\n\n–°–∫–æ—Ä–æ –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é üî•")
    else:
        await callback.message.answer(REGISTRATION_FSM_REPLY)
        await state.set_state(OldRegistration.key)


@router.message(OldRegistration.key)
async def handle_reg_payment_date(message: Message, state: FSMContext):
    await state.update_data(key=message.text)
    await state.set_state(OldRegistration.payment_date)
    await message.answer("–¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã</b> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n‚Äº–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.")


@router.message(OldRegistration.payment_date)
async def handle_reg_payment_sum(message: Message, state: FSMContext):
    if not re.fullmatch(r'[0-9][0-9].[0-9][0-9].[2-9][0-9][2-9][4-9]', r''.join(message.text.strip())):
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ñ–æ—Ä–º–∞—Ç</b> –¥–∞—Ç—ã.\n\n‚Äº –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.")
        return 0
    PD_mes = message.text.strip().split(".")
    payment_date = date(int(PD_mes[2]), int(PD_mes[1]), int(PD_mes[0]))
    await state.update_data(payment_date=payment_date)
    await state.set_state(OldRegistration.payment_sum)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π –º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n‚Äº –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.\np.s. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏ üòâ")


@router.message(OldRegistration.payment_sum)
async def complete_reg(message: Message, state: FSMContext):
    try:
        payment_sum = float(message.text.strip())
    except ValueError:
        await message.answer(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π <b>—Ñ–æ—Ä–º–∞—Ç</b> —Å—É–º–º—ã.\n\n‚Äº –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ <b>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</b>.")
        return 0
    await state.update_data(payment_sum=payment_sum)
    data = await state.get_data()
    await state.clear()
    key = data["key"]
    key = key.split("?")[0]
    server = None
    info = None
    for server in SERVERS:
        info = server.get_key_info_by_key(key)
        if info:
            break
    if not info:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –í –º–µ–Ω—é", callback_data="menu")]
            ]
        )
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á!", reply_markup=keyboard)
        return Exception("No key found")
    keyID = info.key_id
    keyLimit = info.data_limit
    userID = message.from_user.id
    userTG = "@" + message.from_user.username
    PaymentSum = data["payment_sum"]
    PaymentDate: date = data["payment_date"]
    PaymentDate = add_months(PaymentDate, 1)
    user = User(userID=userID, userTG=userTG, keyID=keyID, keyLimit=keyLimit, key=key, PaymentSum=PaymentSum, PaymentDate=PaymentDate, serverName=server.name)
    u = await UsersDatabase.create_user(user)
    await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\nüîì –î–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç!")



@router.callback_query(F.data == "xclient_vpn_usage")
async def handle_xclient_vpn_usage(callback: CallbackQuery):
    await callback.answer(text='')
    user = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    d = await user.xclient.get_server_and_inbound(servers=XSERVERS)
    server: XServer = d["server"]
    if user.Protocol == "VLESS":
        keyInfo = await server.get_client_traffics(uuid=user.uuid)
    else:
        keyInfo = await server.get_client_traffics(email=user.xclient.email)
    traffic = keyInfo["up"] + keyInfo["down"]
    progress = round(traffic / keyInfo["total"], 2)
    answer = f"""
üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN</b> –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:
<b>{round(traffic / 1024**3, 2)}GB</b>/<b>{keyInfo["total"] // 1024**3}GB</b>
[{"".join("‚òÅ" for i in range(int(progress * 10)))}{"".join("‚ú¶" for i in range(10 - int(progress * 10)))}]
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(text=answer, reply_markup=keyboard)

@router.callback_query(F.data == "view_user_key")
async def handle_vpn_key(callback: CallbackQuery):
    await callback.answer(text='')
    user = await UsersDatabase.get_user_by(ID=str(callback.from_user.id))
    if user.xclient:
        key = await user.xclient.get_key(servers=XSERVERS)
    else:
        key = user.outline_client.key
    answer = f"""
üîë <b>–¢–≤–æ–π –∫–ª—é—á</b>:
<pre><code>{key}</code></pre>
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(text=answer, reply_markup=keyboard)



